{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AZIZ\\\\Desktop\\\\gen_meme\\\\client\\\\src\\\\components\\\\MemeGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport html2canvas from 'html2canvas';\nimport toast from 'react-hot-toast';\nimport './component.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MemeGenerator = () => {\n  _s();\n  const [selectedImages, setSelectedImages] = useState([]);\n  const [imageUrl, setImageUrl] = useState('');\n  const [cloudinaryId, setCloudinaryId] = useState('');\n  const [topText, setTopText] = useState('');\n  const [bottomText, setBottomText] = useState('');\n  const [title, setTitle] = useState('');\n  const [isUploading, setIsUploading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [preview, setPreview] = useState(null);\n  const [displayMode, setDisplayMode] = useState('single');\n  const [customTexts, setCustomTexts] = useState([]);\n  const [textEditMode, setTextEditMode] = useState(false);\n  const [activeImageIndex, setActiveImageIndex] = useState(0);\n  const [textColor, setTextColor] = useState('#ffffff');\n  const [textBgColor, setTextBgColor] = useState('#000000');\n  const [textBgOpacity, setTextBgOpacity] = useState(0.7);\n  const [editingText, setEditingText] = useState('');\n  const memeRef = useRef(null);\n  const canvasRef = useRef(null);\n  function hexToRgba(hex, opacity) {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n  }\n  const displayModes = {\n    single: {\n      name: 'Image unique',\n      maxImages: 1\n    },\n    horizontal: {\n      name: 'Horizontal (2)',\n      maxImages: 2\n    },\n    vertical: {\n      name: 'Vertical (2)',\n      maxImages: 2\n    },\n    grid2x2: {\n      name: 'Grille 2x2',\n      maxImages: 4\n    }\n  };\n  const handleImageUpload = async event => {\n    const files = Array.from(event.target.files);\n    const maxImages = displayModes[displayMode].maxImages;\n    if (selectedImages.length + files.length > maxImages) {\n      toast.error(`Maximum ${maxImages} image(s) pour ce mode d'affichage`);\n      return;\n    }\n    const validFiles = files.filter(file => {\n      if (file.size > 5 * 1024 * 1024) {\n        toast.error(`${file.name} est trop volumineux (max 5MB)`);\n        return false;\n      }\n      return true;\n    });\n    const newImages = validFiles.map(file => ({\n      file,\n      preview: URL.createObjectURL(file),\n      id: Date.now() + Math.random()\n    }));\n    setSelectedImages(prev => [...prev, ...newImages]);\n    if (validFiles.length > 0) {\n      setIsUploading(true);\n      setTimeout(() => setIsUploading(false), 1000);\n    }\n  };\n  const removeImage = imageId => {\n    setSelectedImages(prev => {\n      const updated = prev.filter(img => img.id !== imageId);\n      // Libérer l'URL de l'image supprimée\n      const removedImage = prev.find(img => img.id === imageId);\n      if (removedImage) {\n        URL.revokeObjectURL(removedImage.preview);\n      }\n      return updated;\n    });\n\n    // Nettoyer les textes personnalisés associés à cette image\n    setCustomTexts(prev => prev.filter(text => text.imageIndex !== imageId));\n  };\n  const handleCanvasClick = event => {\n    if (!textEditMode || selectedImages.length === 0) return;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const img = event.target;\n    const rect = img.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width * img.naturalWidth;\n    const y = (event.clientY - rect.top) / rect.height * img.naturalHeight;\n\n    // const rect = canvas.getBoundingClientRect();\n    // const scaleX = canvas.width / rect.width;\n    // const scaleY = canvas.height / rect.height;\n\n    // const x = (event.clientX - rect.left) * scaleX;\n    // const y = (event.clientY - rect.top) * scaleY;\n\n    const newText = {\n      id: Date.now(),\n      text: 'Nouveau texte',\n      x: x,\n      y: y,\n      imageIndex: activeImageIndex,\n      color: textColor,\n      bgColor: textBgColor,\n      bgOpacity: textBgOpacity,\n      isEditing: true\n    };\n    setCustomTexts(prev => [...prev, newText]);\n  };\n  const updateCustomText = (textId, newText) => {\n    setCustomTexts(prev => prev.map(t => t.id === textId ? {\n      ...t,\n      text: newText,\n      isEditing: false\n    } : t));\n  };\n  const removeCustomText = textId => {\n    setCustomTexts(prev => prev.filter(t => t.id !== textId));\n  };\n  const generateMemeImage = async () => {\n    if (selectedImages.length === 0) return null;\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n\n      // Dimensions du canvas selon le mode d'affichage\n      let canvasWidth = 800;\n      let canvasHeight = 600;\n      if (displayMode === 'horizontal') {\n        canvasWidth = 1200;\n        canvasHeight = 600;\n      } else if (displayMode === 'vertical') {\n        canvasWidth = 600;\n        canvasHeight = 1200;\n      } else if (displayMode === 'grid2x2') {\n        canvasWidth = 1000;\n        canvasHeight = 1000;\n      }\n      canvas.width = canvasWidth;\n      canvas.height = canvasHeight;\n      let imagesLoaded = 0;\n      const totalImages = selectedImages.length;\n      const drawTextsOnCanvas = () => {\n        // Texte du haut (global)\n        if (topText) {\n          const topFontSize = Math.floor(canvasWidth / 15);\n          const topTextY = 20;\n          ctx.font = `bold ${topFontSize}px Impact`;\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"top\";\n          const textMetrics = ctx.measureText(topText); // CORRIGÉ\n          const textWidth = textMetrics.width;\n          const textHeight = topFontSize;\n          if (textBgOpacity > 0) {\n            const padding = 10;\n            const rectX = canvasWidth / 2 - textWidth / 2 - padding;\n            const rectY = topTextY - padding / 2;\n            const rectWidth = textWidth + padding * 2;\n            const rectHeight = textHeight + padding;\n            ctx.fillStyle = hexToRgba(textBgColor, textBgOpacity); // CORRIGÉ\n            ctx.fillRect(rectX, rectY, rectWidth, rectHeight);\n          }\n          ctx.fillStyle = textColor;\n          ctx.strokeStyle = \"#000000\";\n          ctx.lineWidth = 3;\n          ctx.strokeText(topText, canvasWidth / 2, topTextY);\n          ctx.fillText(topText, canvasWidth / 2, topTextY);\n        }\n        if (bottomText) {\n          const bottomFontSize = Math.floor(canvasWidth / 15);\n          const bottomTextY = canvasHeight - 60;\n          ctx.font = `bold ${bottomFontSize}px Impact`;\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"bottom\";\n          const textMetrics = ctx.measureText(bottomText);\n          const textWidth = textMetrics.width;\n          const textHeight = bottomFontSize;\n          if (textBgOpacity > 0) {\n            const padding = 10;\n            const rectX = canvasWidth / 2 - textWidth / 2 - padding;\n            const rectY = bottomTextY - textHeight - padding / 2;\n            const rectWidth = textWidth + padding * 2;\n            const rectHeight = textHeight + padding;\n            ctx.fillStyle = hexToRgba(textBgColor, textBgOpacity); // CORRIGÉ\n            ctx.fillRect(rectX, rectY, rectWidth, rectHeight);\n          }\n          ctx.fillStyle = textColor;\n          ctx.strokeStyle = \"#000000\";\n          ctx.lineWidth = 3;\n          ctx.strokeText(bottomText, canvasWidth / 2, bottomTextY);\n          ctx.fillText(bottomText, canvasWidth / 2, bottomTextY);\n        }\n        customTexts.forEach(textObj => {\n          if (textObj.text && !textObj.isEditing) {\n            const fontSize = Math.floor(canvasWidth / 20);\n            ctx.font = `bold ${fontSize}px Impact`;\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n\n            // Fond du texte si nécessaire\n            if (textObj.bgOpacity > 0) {\n              const textWidth = ctx.measureText(textObj.text).width;\n              const padding = 10;\n              ctx.fillStyle = `${textObj.bgColor}${Math.floor(textObj.bgOpacity * 255).toString(16).padStart(2, '0')}`;\n              ctx.fillRect(textObj.x - textWidth / 2 - padding, textObj.y - fontSize / 2 - padding / 2, textWidth + padding * 2, fontSize + padding);\n            }\n\n            // Texte\n            ctx.fillStyle = textObj.color;\n            ctx.strokeStyle = \"#000000\";\n            ctx.lineWidth = 2;\n            ctx.strokeText(textObj.text, textObj.x, textObj.y);\n            ctx.fillText(textObj.text, textObj.x, textObj.y);\n          }\n        });\n      };\n      const onImageLoad = () => {\n        imagesLoaded++;\n        if (imagesLoaded === totalImages) {\n          drawTextsOnCanvas();\n          canvas.toBlob(blob => {\n            if (blob) {\n              const url = URL.createObjectURL(blob);\n              setPreview(url);\n              resolve(blob);\n            } else {\n              reject(new Error(\"Échec génération meme\"));\n            }\n          }, \"image/png\");\n        }\n      };\n\n      // Dessiner les images selon le mode d'affichage\n      selectedImages.forEach((imageData, index) => {\n        const img = new Image();\n        img.onload = () => {\n          let x = 0,\n            y = 0,\n            width = canvasWidth,\n            height = canvasHeight;\n          if (displayMode === 'horizontal' && selectedImages.length === 2) {\n            width = canvasWidth / 2;\n            x = index * width;\n          } else if (displayMode === 'vertical' && selectedImages.length === 2) {\n            height = canvasHeight / 2;\n            y = index * height;\n          } else if (displayMode === 'grid2x2') {\n            width = canvasWidth / 2;\n            height = canvasHeight / 2;\n            x = index % 2 * width;\n            y = Math.floor(index / 2) * height;\n          }\n\n          // Maintenir le ratio d'aspect\n          const aspectRatio = img.width / img.height;\n          const targetAspect = width / height;\n          if (aspectRatio > targetAspect) {\n            const newHeight = width / aspectRatio;\n            y += (height - newHeight) / 2;\n            height = newHeight;\n          } else {\n            const newWidth = height * aspectRatio;\n            x += (width - newWidth) / 2;\n            width = newWidth;\n          }\n          ctx.drawImage(img, x, y, width, height);\n          onImageLoad();\n        };\n        img.onerror = () => {\n          console.error(\"Erreur chargement image\");\n          onImageLoad();\n        };\n        img.src = imageData.preview;\n      });\n    });\n  };\n  const handleChangeTop = event => {\n    setTopText(event.target.value);\n  };\n  const handleChangeBot = event => {\n    setBottomText(event.target.value);\n  };\n  useEffect(() => {\n    if (selectedImages.length > 0) {\n      const timeoutId = setTimeout(() => {\n        generateMemeImage().catch(console.error);\n      }, 300);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [selectedImages, topText, bottomText, customTexts, displayMode, textColor, textBgColor, textBgOpacity]);\n  const generateFinalMemeAndUpload = async () => {\n    setIsUploading(true);\n    try {\n      const blob = await generateMemeImage();\n      if (!blob) {\n        toast.error(\"Impossible de générer l'image\");\n        return false;\n      }\n      const formData = new FormData();\n      formData.append('image', blob, 'meme.png');\n      const response = await axios.post(\"http://localhost:5000/api/upload\", formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setImageUrl(response.data.imageUrl);\n      setCloudinaryId(response.data.cloudinaryId);\n      toast.success('Meme généré et uploadé!');\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de la génération:', error);\n      toast.error('Erreur pendant le rendu du meme');\n      return false;\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  const handleSaveMeme = async () => {\n    if (!title.trim()) {\n      toast.error('Veuillez ajouter un titre');\n      return;\n    }\n    const success = await generateFinalMemeAndUpload();\n    if (!success) return;\n    setIsSaving(true);\n    try {\n      const memeData = {\n        title: title.trim(),\n        imageUrl,\n        cloudinaryId\n      };\n      await axios.post('http://localhost:5000/api/memes', memeData);\n      toast.success('Meme sauvegardé avec succès!');\n      resetForm();\n    } catch (error) {\n      console.error('Erreur sauvegarde:', error);\n      toast.error('Erreur lors de la sauvegarde');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  const handleDownload = async () => {\n    if (!preview) return;\n    try {\n      const response = await fetch(preview);\n      const blob = await response.blob();\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.download = `${title || 'meme'}.png`;\n      link.href = url;\n      link.click();\n      URL.revokeObjectURL(url);\n      toast.success('Meme téléchargé!');\n    } catch (error) {\n      console.error('Erreur téléchargement:', error);\n      toast.error('Erreur lors du téléchargement');\n    }\n  };\n  const resetForm = () => {\n    selectedImages.forEach(img => URL.revokeObjectURL(img.preview));\n    setSelectedImages([]);\n    setImageUrl('');\n    setCloudinaryId('');\n    setTopText('');\n    setBottomText('');\n    setTitle('');\n    setCustomTexts([]);\n    setPreview(null);\n    setActiveImageIndex(0);\n  };\n  const handleShare = async () => {\n    if (!preview) return;\n    try {\n      const response = await fetch(preview);\n      const blob = await response.blob();\n      const file = new File([blob], 'meme.png', {\n        type: blob.type\n      });\n      if (navigator.canShare && navigator.canShare({\n        files: [file]\n      })) {\n        await navigator.share({\n          title: `Meme: ${title}`,\n          text: `Regardez ce meme que j'ai créé : ${title}`,\n          files: [file]\n        });\n      } else {\n        navigator.clipboard.writeText(preview);\n        toast.success('URL copiée dans le presse-papier');\n      }\n    } catch (error) {\n      console.error(\"Erreur lors du partage:\", error);\n      toast.error(\"Partage impossible.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"meme-generator px-4 py-8 max-w-6xl mx-auto text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-4xl font-bold mb-8 text-center\",\n      children: \"\\uD83C\\uDFA8 Cr\\xE9ateur de Memes Avanc\\xE9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white/10 backdrop-blur-lg rounded-2xl p-6 shadow-2xl\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold mb-4\",\n        children: \"1. Mode d'affichage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 lg:grid-cols-4 gap-2 mb-6\",\n        children: Object.entries(displayModes).map(([mode, info]) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setDisplayMode(mode);\n            // Limiter les images selon le nouveau mode\n            const maxImages = info.maxImages;\n            if (selectedImages.length > maxImages) {\n              const excess = selectedImages.slice(maxImages);\n              excess.forEach(img => URL.revokeObjectURL(img.preview));\n              setSelectedImages(prev => prev.slice(0, maxImages));\n            }\n          },\n          className: `p-3 rounded-lg border-2 transition ${displayMode === mode ? 'border-blue-400 bg-blue-500/30' : 'border-white/30 bg-white/10 hover:bg-white/20'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm font-medium\",\n            children: info.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xs opacity-75\",\n            children: [\"Max: \", info.maxImages]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 29\n          }, this)]\n        }, mode, true, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold mb-4\",\n        children: \"2. Ajouter des images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"image-upload\",\n          className: \"cursor-pointer block w-full text-center py-4 border-2 border-dashed border-white/50 rounded-xl hover:bg-white/10 transition\",\n          children: isUploading ? \"📤 Upload en cours...\" : `📸 Ajouter des images (${selectedImages.length}/${displayModes[displayMode].maxImages})`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"image-upload\",\n          type: \"file\",\n          accept: \"image/*\",\n          multiple: displayModes[displayMode].maxImages > 1,\n          onChange: handleImageUpload,\n          className: \"hidden\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 17\n      }, this), selectedImages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\",\n        children: selectedImages.map((img, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative group\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: img.preview,\n            alt: `Upload ${index + 1}`,\n            className: `w-full h-24 object-cover rounded-lg border-2 cursor-pointer transition ${activeImageIndex === index ? 'border-blue-400' : 'border-white/30'}`,\n            onClick: () => setActiveImageIndex(index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeImage(img.id),\n            className: \"absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs opacity-0 group-hover:opacity-100 transition\",\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 33\n          }, this), activeImageIndex === index && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute inset-0 bg-blue-500/20 rounded-lg flex items-center justify-center\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs font-bold\",\n              children: \"ACTIF\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 37\n          }, this)]\n        }, img.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 21\n      }, this), selectedImages.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-semibold mb-4\",\n          children: \"3. Configuration du texte\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 lg:grid-cols-3 gap-4 mb-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-sm mb-2\",\n              children: \"Couleur du texte\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"color\",\n              value: textColor,\n              onChange: e => setTextColor(e.target.value),\n              className: \"w-full h-10 rounded border-none\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-sm mb-2\",\n              children: \"Couleur du fond\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"color\",\n              value: textBgColor,\n              onChange: e => setTextBgColor(e.target.value),\n              className: \"w-full h-10 rounded border-none\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-sm mb-2\",\n              children: [\"Opacit\\xE9 du fond: \", Math.round(textBgOpacity * 100), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 555,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0\",\n              max: \"1\",\n              step: \"0.1\",\n              value: textBgOpacity,\n              onChange: e => setTextBgOpacity(parseFloat(e.target.value)),\n              className: \"w-full\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 556,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-semibold mb-4\",\n          children: \"4. Ajouter du texte\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Titre du meme\",\n            value: title,\n            onChange: e => setTitle(e.target.value),\n            className: \"bg-white/20 border border-white/30 text-white px-4 py-2 rounded-lg placeholder-white sm:col-span-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Texte du haut (global)\",\n            value: topText,\n            onChange: handleChangeTop,\n            className: \"bg-white/20 border border-white/30 text-white px-4 py-2 rounded-lg placeholder-white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Texte du bas (global)\",\n            value: bottomText,\n            onChange: handleChangeBot,\n            className: \"bg-white/20 border border-white/30 text-white px-4 py-2 rounded-lg placeholder-white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center gap-4 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setTextEditMode(!textEditMode),\n            className: `px-4 py-2 rounded-lg transition ${textEditMode ? 'bg-green-500 text-white' : 'bg-white/20 text-white hover:bg-white/30'}`,\n            children: textEditMode ? '✓ Mode texte activé' : '✏️ Activer mode texte'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 29\n          }, this), textEditMode && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm opacity-75\",\n            children: \"Cliquez sur l'aper\\xE7u pour ajouter du texte\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 25\n        }, this), customTexts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-semibold mb-2\",\n            children: \"Textes personnalis\\xE9s:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-2\",\n            children: customTexts.map(textObj => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center gap-2\",\n              children: [textObj.isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: editingText,\n                onChange: e => setEditingText(e.target.value),\n                onBlur: () => {\n                  updateCustomText(textObj.id, editingText);\n                  setEditingText('');\n                },\n                onKeyDown: e => {\n                  if (e.key === 'Enter') {\n                    updateCustomText(textObj.id, editingText);\n                    setEditingText('');\n                  }\n                },\n                className: \"bg-white/20 border border-white/30 text-white px-2 py-1 rounded text-sm flex-1\",\n                autoFocus: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 49\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-sm flex-1\",\n                children: [\"\\\"\", textObj.text, \"\\\"\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 637,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => removeCustomText(textObj.id),\n                className: \"bg-red-500/70 hover:bg-red-500 text-white px-2 py-1 rounded text-xs\",\n                children: \"Supprimer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 640,\n                columnNumber: 45\n              }, this)]\n            }, textObj.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-semibold mb-4\",\n          children: \"5. Aper\\xE7u\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative bg-white rounded-xl overflow-hidden shadow-xl p-4 max-w-2xl mx-auto mb-6\",\n          children: preview ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative\",\n            children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n              ref: canvasRef,\n              onClick: handleCanvasClick,\n              className: `w-full rounded-md ${textEditMode ? 'cursor-crosshair' : ''}`,\n              style: {\n                display: 'none'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: preview,\n              alt: \"preview\",\n              className: `w-full rounded-md ${textEditMode ? 'cursor-crosshair' : ''}`,\n              onClick: handleCanvasClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 37\n            }, this), textEditMode && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"absolute top-2 left-2 bg-black/70 text-white px-2 py-1 rounded text-xs\",\n              children: \"Mode texte: cliquez pour ajouter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"aspect-video bg-gray-200 rounded-md flex items-center justify-center text-gray-500\",\n            children: \"Aper\\xE7u du meme\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-4 justify-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSaveMeme,\n            disabled: isSaving,\n            className: \"action-btn save-btn\",\n            children: isSaving ? '💾 Sauvegarde...' : '💾 Sauvegarder'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleDownload,\n            className: \"action-btn download-btn\",\n            children: \"\\uD83D\\uDCE5 T\\xE9l\\xE9charger\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleShare,\n            className: \"action-btn share-btn\",\n            children: \"\\uD83D\\uDCE4 Partager\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetForm,\n            className: \"action-btn reset-btn\",\n            children: \"\\uD83D\\uDD04 Nouveau\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 456,\n    columnNumber: 9\n  }, this);\n};\n_s(MemeGenerator, \"YsaVQR5fK19P01Q3skbJxLLUmIU=\");\n_c = MemeGenerator;\nexport default MemeGenerator;\nvar _c;\n$RefreshReg$(_c, \"MemeGenerator\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","html2canvas","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","MemeGenerator","_s","selectedImages","setSelectedImages","imageUrl","setImageUrl","cloudinaryId","setCloudinaryId","topText","setTopText","bottomText","setBottomText","title","setTitle","isUploading","setIsUploading","isSaving","setIsSaving","preview","setPreview","displayMode","setDisplayMode","customTexts","setCustomTexts","textEditMode","setTextEditMode","activeImageIndex","setActiveImageIndex","textColor","setTextColor","textBgColor","setTextBgColor","textBgOpacity","setTextBgOpacity","editingText","setEditingText","memeRef","canvasRef","hexToRgba","hex","opacity","r","parseInt","slice","g","b","displayModes","single","name","maxImages","horizontal","vertical","grid2x2","handleImageUpload","event","files","Array","from","target","length","error","validFiles","filter","file","size","newImages","map","URL","createObjectURL","id","Date","now","Math","random","prev","setTimeout","removeImage","imageId","updated","img","removedImage","find","revokeObjectURL","text","imageIndex","handleCanvasClick","canvas","current","rect","getBoundingClientRect","x","clientX","left","width","naturalWidth","y","clientY","top","height","naturalHeight","newText","color","bgColor","bgOpacity","isEditing","updateCustomText","textId","t","removeCustomText","generateMemeImage","Promise","resolve","reject","document","createElement","ctx","getContext","canvasWidth","canvasHeight","imagesLoaded","totalImages","drawTextsOnCanvas","topFontSize","floor","topTextY","font","textAlign","textBaseline","textMetrics","measureText","textWidth","textHeight","padding","rectX","rectY","rectWidth","rectHeight","fillStyle","fillRect","strokeStyle","lineWidth","strokeText","fillText","bottomFontSize","bottomTextY","forEach","textObj","fontSize","toString","padStart","onImageLoad","toBlob","blob","url","Error","imageData","index","Image","onload","aspectRatio","targetAspect","newHeight","newWidth","drawImage","onerror","console","src","handleChangeTop","value","handleChangeBot","timeoutId","catch","clearTimeout","generateFinalMemeAndUpload","formData","FormData","append","response","post","headers","data","success","handleSaveMeme","trim","memeData","resetForm","handleDownload","fetch","link","download","href","click","handleShare","File","type","navigator","canShare","share","clipboard","writeText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","mode","info","onClick","excess","htmlFor","accept","multiple","onChange","alt","e","round","min","max","step","parseFloat","placeholder","onBlur","onKeyDown","key","autoFocus","ref","style","display","disabled","_c","$RefreshReg$"],"sources":["C:/Users/AZIZ/Desktop/gen_meme/client/src/components/MemeGenerator.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport html2canvas from 'html2canvas';\r\nimport toast from 'react-hot-toast';\r\nimport './component.css';\r\n\r\nconst MemeGenerator = () => {\r\n    const [selectedImages, setSelectedImages] = useState([]);\r\n    const [imageUrl, setImageUrl] = useState('');\r\n    const [cloudinaryId, setCloudinaryId] = useState('');\r\n    const [topText, setTopText] = useState('');\r\n    const [bottomText, setBottomText] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    const [isUploading, setIsUploading] = useState(false);\r\n    const [isSaving, setIsSaving] = useState(false);\r\n    const [preview, setPreview] = useState(null);\r\n    const [displayMode, setDisplayMode] = useState('single'); \r\n    const [customTexts, setCustomTexts] = useState([]);\r\n    const [textEditMode, setTextEditMode] = useState(false);\r\n    const [activeImageIndex, setActiveImageIndex] = useState(0);\r\n    const [textColor, setTextColor] = useState('#ffffff');\r\n    const [textBgColor, setTextBgColor] = useState('#000000');\r\n    const [textBgOpacity, setTextBgOpacity] = useState(0.7);\r\n    const [editingText, setEditingText] = useState('');\r\n\r\n    const memeRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n\r\n    function hexToRgba(hex, opacity) {\r\n        const r = parseInt(hex.slice(1, 3), 16);\r\n        const g = parseInt(hex.slice(3, 5), 16);\r\n        const b = parseInt(hex.slice(5, 7), 16);\r\n        return `rgba(${r}, ${g}, ${b}, ${opacity})`;\r\n      }\r\n      \r\n\r\n    const displayModes = {\r\n        single: { name: 'Image unique', maxImages: 1 },\r\n        horizontal: { name: 'Horizontal (2)', maxImages: 2 },\r\n        vertical: { name: 'Vertical (2)', maxImages: 2 },\r\n        grid2x2: { name: 'Grille 2x2', maxImages: 4 }\r\n    };\r\n\r\n    const handleImageUpload = async (event) => {\r\n        const files = Array.from(event.target.files);\r\n        const maxImages = displayModes[displayMode].maxImages;\r\n\r\n        if (selectedImages.length + files.length > maxImages) {\r\n            toast.error(`Maximum ${maxImages} image(s) pour ce mode d'affichage`);\r\n            return;\r\n        }\r\n\r\n        const validFiles = files.filter(file => {\r\n            if (file.size > 5 * 1024 * 1024) {\r\n                toast.error(`${file.name} est trop volumineux (max 5MB)`);\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n\r\n        const newImages = validFiles.map(file => ({\r\n            file,\r\n            preview: URL.createObjectURL(file),\r\n            id: Date.now() + Math.random()\r\n        }));\r\n\r\n        setSelectedImages(prev => [...prev, ...newImages]);\r\n        if (validFiles.length > 0) {\r\n            setIsUploading(true);\r\n            setTimeout(() => setIsUploading(false), 1000);\r\n        }\r\n    };\r\n\r\n    const removeImage = (imageId) => {\r\n        setSelectedImages(prev => {\r\n            const updated = prev.filter(img => img.id !== imageId);\r\n            // Libérer l'URL de l'image supprimée\r\n            const removedImage = prev.find(img => img.id === imageId);\r\n            if (removedImage) {\r\n                URL.revokeObjectURL(removedImage.preview);\r\n            }\r\n            return updated;\r\n        });\r\n\r\n        // Nettoyer les textes personnalisés associés à cette image\r\n        setCustomTexts(prev => prev.filter(text => text.imageIndex !== imageId));\r\n    };\r\n\r\n    const handleCanvasClick = (event) => {\r\n        if (!textEditMode || selectedImages.length === 0) return;\r\n\r\n        const canvas = canvasRef.current;\r\n        if (!canvas) return;\r\n\r\n        const img = event.target;\r\n        const rect = img.getBoundingClientRect();\r\n\r\n        const x = ((event.clientX - rect.left) / rect.width) * img.naturalWidth;\r\n        const y = ((event.clientY - rect.top) / rect.height) * img.naturalHeight;\r\n\r\n        // const rect = canvas.getBoundingClientRect();\r\n        // const scaleX = canvas.width / rect.width;\r\n        // const scaleY = canvas.height / rect.height;\r\n\r\n        // const x = (event.clientX - rect.left) * scaleX;\r\n        // const y = (event.clientY - rect.top) * scaleY;\r\n\r\n        const newText = {\r\n            id: Date.now(),\r\n            text: 'Nouveau texte',\r\n            x: x,\r\n            y: y,\r\n            imageIndex: activeImageIndex,\r\n            color: textColor,\r\n            bgColor: textBgColor,\r\n            bgOpacity: textBgOpacity,\r\n            isEditing: true\r\n        };\r\n\r\n        setCustomTexts(prev => [...prev, newText]);\r\n    };\r\n\r\n    const updateCustomText = (textId, newText) => {\r\n        setCustomTexts(prev => prev.map(t =>\r\n            t.id === textId ? { ...t, text: newText, isEditing: false } : t\r\n        ));\r\n    };\r\n\r\n    const removeCustomText = (textId) => {\r\n        setCustomTexts(prev => prev.filter(t => t.id !== textId));\r\n    };\r\n\r\n    const generateMemeImage = async () => {\r\n        if (selectedImages.length === 0) return null;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const canvas = document.createElement(\"canvas\");\r\n            const ctx = canvas.getContext(\"2d\");\r\n\r\n            // Dimensions du canvas selon le mode d'affichage\r\n            let canvasWidth = 800;\r\n            let canvasHeight = 600;\r\n\r\n            if (displayMode === 'horizontal') {\r\n                canvasWidth = 1200;\r\n                canvasHeight = 600;\r\n            } else if (displayMode === 'vertical') {\r\n                canvasWidth = 600;\r\n                canvasHeight = 1200;\r\n            } else if (displayMode === 'grid2x2') {\r\n                canvasWidth = 1000;\r\n                canvasHeight = 1000;\r\n            }\r\n\r\n            canvas.width = canvasWidth;\r\n            canvas.height = canvasHeight;\r\n\r\n            let imagesLoaded = 0;\r\n            const totalImages = selectedImages.length;\r\n\r\n            const drawTextsOnCanvas = () => {\r\n                // Texte du haut (global)\r\n                if (topText) {\r\n                    const topFontSize = Math.floor(canvasWidth / 15);\r\n                    const topTextY = 20;\r\n                  \r\n                    ctx.font = `bold ${topFontSize}px Impact`;\r\n                    ctx.textAlign = \"center\";\r\n                    ctx.textBaseline = \"top\";\r\n                  \r\n                    const textMetrics = ctx.measureText(topText); // CORRIGÉ\r\n                    const textWidth = textMetrics.width;\r\n                    const textHeight = topFontSize;\r\n                  \r\n                    if (textBgOpacity > 0) {\r\n                      const padding = 10;\r\n                      const rectX = canvasWidth / 2 - textWidth / 2 - padding;\r\n                      const rectY = topTextY - padding / 2;\r\n                      const rectWidth = textWidth + padding * 2;\r\n                      const rectHeight = textHeight + padding;\r\n                  \r\n                      ctx.fillStyle = hexToRgba(textBgColor, textBgOpacity); // CORRIGÉ\r\n                      ctx.fillRect(rectX, rectY, rectWidth, rectHeight);\r\n                    }\r\n                  \r\n                    ctx.fillStyle = textColor;\r\n                    ctx.strokeStyle = \"#000000\";\r\n                    ctx.lineWidth = 3;\r\n                    ctx.strokeText(topText, canvasWidth / 2, topTextY);\r\n                    ctx.fillText(topText, canvasWidth / 2, topTextY);\r\n                  }\r\n                  \r\n\r\n\r\n                  if (bottomText) {\r\n                    const bottomFontSize = Math.floor(canvasWidth / 15);\r\n                    const bottomTextY = canvasHeight - 60;\r\n                  \r\n                    ctx.font = `bold ${bottomFontSize}px Impact`;\r\n                    ctx.textAlign = \"center\";\r\n                    ctx.textBaseline = \"bottom\";\r\n                  \r\n                    const textMetrics = ctx.measureText(bottomText);\r\n                    const textWidth = textMetrics.width;\r\n                    const textHeight = bottomFontSize;\r\n                  \r\n                    if (textBgOpacity > 0) {\r\n                      const padding = 10;\r\n                      const rectX = canvasWidth / 2 - textWidth / 2 - padding;\r\n                      const rectY = bottomTextY - textHeight - padding / 2;\r\n                      const rectWidth = textWidth + padding * 2;\r\n                      const rectHeight = textHeight + padding;\r\n                  \r\n                      ctx.fillStyle = hexToRgba(textBgColor, textBgOpacity); // CORRIGÉ\r\n                      ctx.fillRect(rectX, rectY, rectWidth, rectHeight);\r\n                    }\r\n                  \r\n                    ctx.fillStyle = textColor;\r\n                    ctx.strokeStyle = \"#000000\";\r\n                    ctx.lineWidth = 3;\r\n                    ctx.strokeText(bottomText, canvasWidth / 2, bottomTextY);\r\n                    ctx.fillText(bottomText, canvasWidth / 2, bottomTextY);\r\n                  }\r\n                  \r\n\r\n                customTexts.forEach(textObj => {\r\n                    if (textObj.text && !textObj.isEditing) {\r\n                        const fontSize = Math.floor(canvasWidth / 20);\r\n                        ctx.font = `bold ${fontSize}px Impact`;\r\n                        ctx.textAlign = \"center\";\r\n                        ctx.textBaseline = \"middle\";\r\n\r\n                        // Fond du texte si nécessaire\r\n                        if (textObj.bgOpacity > 0) {\r\n                            const textWidth = ctx.measureText(textObj.text).width;\r\n                            const padding = 10;\r\n\r\n                            ctx.fillStyle = `${textObj.bgColor}${Math.floor(textObj.bgOpacity * 255).toString(16).padStart(2, '0')}`;\r\n                            ctx.fillRect(\r\n                                textObj.x - textWidth / 2 - padding,\r\n                                textObj.y - fontSize / 2 - padding / 2,\r\n                                textWidth + padding * 2,\r\n                                fontSize + padding\r\n                            );\r\n                        }\r\n\r\n                        // Texte\r\n                        ctx.fillStyle = textObj.color;\r\n                        ctx.strokeStyle = \"#000000\";\r\n                        ctx.lineWidth = 2;\r\n\r\n                        ctx.strokeText(textObj.text, textObj.x, textObj.y);\r\n                        ctx.fillText(textObj.text, textObj.x, textObj.y);\r\n                    }\r\n                });\r\n            };\r\n\r\n            const onImageLoad = () => {\r\n                imagesLoaded++;\r\n                if (imagesLoaded === totalImages) {\r\n                    drawTextsOnCanvas();\r\n                    canvas.toBlob((blob) => {\r\n                        if (blob) {\r\n                            const url = URL.createObjectURL(blob);\r\n                            setPreview(url);\r\n                            resolve(blob);\r\n                        } else {\r\n                            reject(new Error(\"Échec génération meme\"));\r\n                        }\r\n                    }, \"image/png\");\r\n                }\r\n            };\r\n\r\n            // Dessiner les images selon le mode d'affichage\r\n            selectedImages.forEach((imageData, index) => {\r\n                const img = new Image();\r\n                img.onload = () => {\r\n                    let x = 0, y = 0, width = canvasWidth, height = canvasHeight;\r\n\r\n                    if (displayMode === 'horizontal' && selectedImages.length === 2) {\r\n                        width = canvasWidth / 2;\r\n                        x = index * width;\r\n                    } else if (displayMode === 'vertical' && selectedImages.length === 2) {\r\n                        height = canvasHeight / 2;\r\n                        y = index * height;\r\n                    } else if (displayMode === 'grid2x2') {\r\n                        width = canvasWidth / 2;\r\n                        height = canvasHeight / 2;\r\n                        x = (index % 2) * width;\r\n                        y = Math.floor(index / 2) * height;\r\n                    }\r\n\r\n                    // Maintenir le ratio d'aspect\r\n                    const aspectRatio = img.width / img.height;\r\n                    const targetAspect = width / height;\r\n\r\n                    if (aspectRatio > targetAspect) {\r\n                        const newHeight = width / aspectRatio;\r\n                        y += (height - newHeight) / 2;\r\n                        height = newHeight;\r\n                    } else {\r\n                        const newWidth = height * aspectRatio;\r\n                        x += (width - newWidth) / 2;\r\n                        width = newWidth;\r\n                    }\r\n\r\n                    ctx.drawImage(img, x, y, width, height);\r\n                    onImageLoad();\r\n                };\r\n\r\n                img.onerror = () => {\r\n                    console.error(\"Erreur chargement image\");\r\n                    onImageLoad();\r\n                };\r\n\r\n                img.src = imageData.preview;\r\n            });\r\n        });\r\n    };\r\n\r\n    const handleChangeTop = (event) => {\r\n        setTopText(event.target.value);\r\n    };\r\n\r\n    const handleChangeBot = (event) => {\r\n        setBottomText(event.target.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (selectedImages.length > 0) {\r\n            const timeoutId = setTimeout(() => {\r\n                generateMemeImage().catch(console.error);\r\n            }, 300);\r\n\r\n            return () => clearTimeout(timeoutId);\r\n        }\r\n    }, [selectedImages, topText, bottomText, customTexts, displayMode, textColor, textBgColor, textBgOpacity]);\r\n\r\n    const generateFinalMemeAndUpload = async () => {\r\n        setIsUploading(true);\r\n        try {\r\n            const blob = await generateMemeImage();\r\n            if (!blob) {\r\n                toast.error(\"Impossible de générer l'image\");\r\n                return false;\r\n            }\r\n\r\n            const formData = new FormData();\r\n            formData.append('image', blob, 'meme.png');\r\n\r\n            const response = await axios.post(\"http://localhost:5000/api/upload\", formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                },\r\n            });\r\n\r\n            setImageUrl(response.data.imageUrl);\r\n            setCloudinaryId(response.data.cloudinaryId);\r\n            toast.success('Meme généré et uploadé!');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Erreur lors de la génération:', error);\r\n            toast.error('Erreur pendant le rendu du meme');\r\n            return false;\r\n        } finally {\r\n            setIsUploading(false);\r\n        }\r\n    };\r\n\r\n    const handleSaveMeme = async () => {\r\n        if (!title.trim()) {\r\n            toast.error('Veuillez ajouter un titre');\r\n            return;\r\n        }\r\n\r\n        const success = await generateFinalMemeAndUpload();\r\n        if (!success) return;\r\n\r\n        setIsSaving(true);\r\n        try {\r\n            const memeData = {\r\n                title: title.trim(),\r\n                imageUrl,\r\n                cloudinaryId,\r\n            };\r\n            await axios.post('http://localhost:5000/api/memes', memeData);\r\n            toast.success('Meme sauvegardé avec succès!');\r\n            resetForm();\r\n        } catch (error) {\r\n            console.error('Erreur sauvegarde:', error);\r\n            toast.error('Erreur lors de la sauvegarde');\r\n        } finally {\r\n            setIsSaving(false);\r\n        }\r\n    };\r\n\r\n    const handleDownload = async () => {\r\n        if (!preview) return;\r\n\r\n        try {\r\n            const response = await fetch(preview);\r\n            const blob = await response.blob();\r\n            const url = URL.createObjectURL(blob);\r\n\r\n            const link = document.createElement('a');\r\n            link.download = `${title || 'meme'}.png`;\r\n            link.href = url;\r\n            link.click();\r\n\r\n            URL.revokeObjectURL(url);\r\n            toast.success('Meme téléchargé!');\r\n        } catch (error) {\r\n            console.error('Erreur téléchargement:', error);\r\n            toast.error('Erreur lors du téléchargement');\r\n        }\r\n    };\r\n\r\n    const resetForm = () => {\r\n        selectedImages.forEach(img => URL.revokeObjectURL(img.preview));\r\n        setSelectedImages([]);\r\n        setImageUrl('');\r\n        setCloudinaryId('');\r\n        setTopText('');\r\n        setBottomText('');\r\n        setTitle('');\r\n        setCustomTexts([]);\r\n        setPreview(null);\r\n        setActiveImageIndex(0);\r\n    };\r\n\r\n    const handleShare = async () => {\r\n        if (!preview) return;\r\n\r\n        try {\r\n            const response = await fetch(preview);\r\n            const blob = await response.blob();\r\n            const file = new File([blob], 'meme.png', { type: blob.type });\r\n\r\n            if (navigator.canShare && navigator.canShare({ files: [file] })) {\r\n                await navigator.share({\r\n                    title: `Meme: ${title}`,\r\n                    text: `Regardez ce meme que j'ai créé : ${title}`,\r\n                    files: [file],\r\n                });\r\n            } else {\r\n                navigator.clipboard.writeText(preview);\r\n                toast.success('URL copiée dans le presse-papier');\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Erreur lors du partage:\", error);\r\n            toast.error(\"Partage impossible.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"meme-generator px-4 py-8 max-w-6xl mx-auto text-white\">\r\n            <h1 className=\"text-4xl font-bold mb-8 text-center\">🎨 Créateur de Memes Avancé</h1>\r\n\r\n            <div className=\"bg-white/10 backdrop-blur-lg rounded-2xl p-6 shadow-2xl\">\r\n                {/* Section Mode d'affichage */}\r\n                <h2 className=\"text-2xl font-semibold mb-4\">1. Mode d'affichage</h2>\r\n                <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-2 mb-6\">\r\n                    {Object.entries(displayModes).map(([mode, info]) => (\r\n                        <button\r\n                            key={mode}\r\n                            onClick={() => {\r\n                                setDisplayMode(mode);\r\n                                // Limiter les images selon le nouveau mode\r\n                                const maxImages = info.maxImages;\r\n                                if (selectedImages.length > maxImages) {\r\n                                    const excess = selectedImages.slice(maxImages);\r\n                                    excess.forEach(img => URL.revokeObjectURL(img.preview));\r\n                                    setSelectedImages(prev => prev.slice(0, maxImages));\r\n                                }\r\n                            }}\r\n                            className={`p-3 rounded-lg border-2 transition ${displayMode === mode\r\n                                    ? 'border-blue-400 bg-blue-500/30'\r\n                                    : 'border-white/30 bg-white/10 hover:bg-white/20'\r\n                                }`}\r\n                        >\r\n                            <div className=\"text-sm font-medium\">{info.name}</div>\r\n                            <div className=\"text-xs opacity-75\">Max: {info.maxImages}</div>\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* Section Upload */}\r\n                <h2 className=\"text-2xl font-semibold mb-4\">2. Ajouter des images</h2>\r\n                <div className=\"mb-6\">\r\n                    <label htmlFor=\"image-upload\" className=\"cursor-pointer block w-full text-center py-4 border-2 border-dashed border-white/50 rounded-xl hover:bg-white/10 transition\">\r\n                        {isUploading ? \"📤 Upload en cours...\" : `📸 Ajouter des images (${selectedImages.length}/${displayModes[displayMode].maxImages})`}\r\n                    </label>\r\n                    <input\r\n                        id=\"image-upload\"\r\n                        type=\"file\"\r\n                        accept=\"image/*\"\r\n                        multiple={displayModes[displayMode].maxImages > 1}\r\n                        onChange={handleImageUpload}\r\n                        className=\"hidden\"\r\n                    />\r\n                </div>\r\n\r\n                {/* Images uploadées */}\r\n                {selectedImages.length > 0 && (\r\n                    <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n                        {selectedImages.map((img, index) => (\r\n                            <div key={img.id} className=\"relative group\">\r\n                                <img\r\n                                    src={img.preview}\r\n                                    alt={`Upload ${index + 1}`}\r\n                                    className={`w-full h-24 object-cover rounded-lg border-2 cursor-pointer transition ${activeImageIndex === index ? 'border-blue-400' : 'border-white/30'\r\n                                        }`}\r\n                                    onClick={() => setActiveImageIndex(index)}\r\n                                />\r\n                                <button\r\n                                    onClick={() => removeImage(img.id)}\r\n                                    className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs opacity-0 group-hover:opacity-100 transition\"\r\n                                >\r\n                                    ✕\r\n                                </button>\r\n                                {activeImageIndex === index && (\r\n                                    <div className=\"absolute inset-0 bg-blue-500/20 rounded-lg flex items-center justify-center\">\r\n                                        <span className=\"text-xs font-bold\">ACTIF</span>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Configuration du texte */}\r\n                {selectedImages.length > 0 && (\r\n                    <>\r\n                        <h2 className=\"text-2xl font-semibold mb-4\">3. Configuration du texte</h2>\r\n                        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 mb-6\">\r\n                            <div>\r\n                                <label className=\"block text-sm mb-2\">Couleur du texte</label>\r\n                                <input\r\n                                    type=\"color\"\r\n                                    value={textColor}\r\n                                    onChange={(e) => setTextColor(e.target.value)}\r\n                                    className=\"w-full h-10 rounded border-none\"\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"block text-sm mb-2\">Couleur du fond</label>\r\n                                <input\r\n                                    type=\"color\"\r\n                                    value={textBgColor}\r\n                                    onChange={(e) => setTextBgColor(e.target.value)}\r\n                                    className=\"w-full h-10 rounded border-none\"\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"block text-sm mb-2\">Opacité du fond: {Math.round(textBgOpacity * 100)}%</label>\r\n                                <input\r\n                                    type=\"range\"\r\n                                    min=\"0\"\r\n                                    max=\"1\"\r\n                                    step=\"0.1\"\r\n                                    value={textBgOpacity}\r\n                                    onChange={(e) => setTextBgOpacity(parseFloat(e.target.value))}\r\n                                    className=\"w-full\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Section Texte */}\r\n                        <h2 className=\"text-2xl font-semibold mb-4\">4. Ajouter du texte</h2>\r\n                        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Titre du meme\"\r\n                                value={title}\r\n                                onChange={(e) => setTitle(e.target.value)}\r\n                                className=\"bg-white/20 border border-white/30 text-white px-4 py-2 rounded-lg placeholder-white sm:col-span-2\"\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Texte du haut (global)\"\r\n                                value={topText}\r\n                                onChange={handleChangeTop}\r\n                                className=\"bg-white/20 border border-white/30 text-white px-4 py-2 rounded-lg placeholder-white\"\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Texte du bas (global)\"\r\n                                value={bottomText}\r\n                                onChange={handleChangeBot}\r\n                                className=\"bg-white/20 border border-white/30 text-white px-4 py-2 rounded-lg placeholder-white\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"flex items-center gap-4 mb-4\">\r\n                            <button\r\n                                onClick={() => setTextEditMode(!textEditMode)}\r\n                                className={`px-4 py-2 rounded-lg transition ${textEditMode\r\n                                        ? 'bg-green-500 text-white'\r\n                                        : 'bg-white/20 text-white hover:bg-white/30'\r\n                                    }`}\r\n                            >\r\n                                {textEditMode ? '✓ Mode texte activé' : '✏️ Activer mode texte'}\r\n                            </button>\r\n                            {textEditMode && (\r\n                                <span className=\"text-sm opacity-75\">\r\n                                    Cliquez sur l'aperçu pour ajouter du texte\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n\r\n                        {/* Textes personnalisés */}\r\n                        {customTexts.length > 0 && (\r\n                            <div className=\"mb-4\">\r\n                                <h3 className=\"text-lg font-semibold mb-2\">Textes personnalisés:</h3>\r\n                                <div className=\"space-y-2\">\r\n                                    {customTexts.map((textObj) => (\r\n                                        <div key={textObj.id} className=\"flex items-center gap-2\">\r\n                                            {textObj.isEditing ? (\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    value={editingText}\r\n                                                    onChange={(e) => setEditingText(e.target.value)}\r\n                                                    onBlur={() => {\r\n                                                        updateCustomText(textObj.id, editingText);\r\n                                                        setEditingText('');\r\n                                                    }}\r\n                                                    onKeyDown={(e) => {\r\n                                                        if (e.key === 'Enter') {\r\n                                                            updateCustomText(textObj.id, editingText);\r\n                                                            setEditingText('');\r\n                                                        }\r\n                                                    }}\r\n                                                    className=\"bg-white/20 border border-white/30 text-white px-2 py-1 rounded text-sm flex-1\"\r\n                                                    autoFocus\r\n                                                />\r\n                                            ) : (\r\n                                                <span className=\"text-sm flex-1\">\"{textObj.text}\"</span>\r\n                                            )}\r\n\r\n                                            <button\r\n                                                onClick={() => removeCustomText(textObj.id)}\r\n                                                className=\"bg-red-500/70 hover:bg-red-500 text-white px-2 py-1 rounded text-xs\"\r\n                                            >\r\n                                                Supprimer\r\n                                            </button>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {/* Aperçu */}\r\n                        <h2 className=\"text-2xl font-semibold mb-4\">5. Aperçu</h2>\r\n                        <div className=\"relative bg-white rounded-xl overflow-hidden shadow-xl p-4 max-w-2xl mx-auto mb-6\">\r\n                            {preview ? (\r\n                                <div className=\"relative\">\r\n                                    <canvas\r\n                                        ref={canvasRef}\r\n                                        onClick={handleCanvasClick}\r\n                                        className={`w-full rounded-md ${textEditMode ? 'cursor-crosshair' : ''}`}\r\n                                        style={{ display: 'none' }}\r\n                                    />\r\n                                    <img\r\n                                        src={preview}\r\n                                        alt=\"preview\"\r\n                                        className={`w-full rounded-md ${textEditMode ? 'cursor-crosshair' : ''}`}\r\n                                        onClick={handleCanvasClick}\r\n                                    />\r\n                                    {textEditMode && (\r\n                                        <div className=\"absolute top-2 left-2 bg-black/70 text-white px-2 py-1 rounded text-xs\">\r\n                                            Mode texte: cliquez pour ajouter\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            ) : (\r\n                                <div className=\"aspect-video bg-gray-200 rounded-md flex items-center justify-center text-gray-500\">\r\n                                    Aperçu du meme\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n\r\n                        {/* Actions */}\r\n                        <div className=\"flex flex-wrap gap-4 justify-center\">\r\n                            <button onClick={handleSaveMeme} disabled={isSaving} className=\"action-btn save-btn\">\r\n                                {isSaving ? '💾 Sauvegarde...' : '💾 Sauvegarder'}\r\n                            </button>\r\n                            <button onClick={handleDownload} className=\"action-btn download-btn\">\r\n                                📥 Télécharger\r\n                            </button>\r\n                            <button onClick={handleShare} className=\"action-btn share-btn\">\r\n                                📤 Partager\r\n                            </button>\r\n                            <button onClick={resetForm} className=\"action-btn reset-btn\">\r\n                                🔄 Nouveau\r\n                            </button>\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MemeGenerator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}